/* This code was generated by Akka Serverless tooling.
 * As long as this file exists it will not be re-generated.
 * You are free to make changes to this file.
 */
package lunaconf.domain;

import akka.actor.ActorSystem;
import akka.stream.javadsl.Sink;
import akka.stream.javadsl.Source;
import com.akkaserverless.javasdk.testkit.junit.AkkaServerlessTestkitResource;
import lunaconf.Main;
import lunaconf.api.StepApi;
import lunaconf.api.StepServiceClient;
import lunaconf.view.StepByActiveStatusClient;
import lunaconf.view.StepByCustomerClient;
import lunaconf.view.StepViewModel;
import org.junit.ClassRule;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.UUID;
import java.util.concurrent.CompletionStage;
import java.util.concurrent.ExecutionException;

import static java.util.concurrent.TimeUnit.SECONDS;
import static org.junit.Assert.*;

// Example of an integration test calling our service via the Akka Serverless proxy
// Run all test classes ending with "IntegrationTest" using `mvn verify -Pit`
public class StepEntityIntegrationTest {

  private static Logger log = LoggerFactory.getLogger(StepEntityIntegrationTest.class);

  /**
   * The test kit starts both the service container and the Akka Serverless proxy.
   */
  @ClassRule
  public static final AkkaServerlessTestkitResource testkit =
    new AkkaServerlessTestkitResource(Main.createAkkaServerless());

  /**
   * Use the generated gRPC client to call the service through the Akka Serverless proxy.
   */
  private final ActorSystem system;
  private final StepServiceClient client;
  private final StepByActiveStatusClient viewByActiveStatusClient;
  private final StepByCustomerClient viewByCustomerClient;

  public StepEntityIntegrationTest() {
    system = testkit.getActorSystem();
    client = StepServiceClient.create(testkit.getGrpcClientSettings(), testkit.getActorSystem());
    viewByActiveStatusClient = StepByActiveStatusClient.create(testkit.getGrpcClientSettings(),testkit.getActorSystem());
    viewByCustomerClient = StepByCustomerClient.create(testkit.getGrpcClientSettings(),testkit.getActorSystem());
  }
  @Test
  public void addStep() throws Exception {
    String stepId = UUID.randomUUID().toString();
    addStep(stepId);
    assertTrue(isInNotActiveByStatusView(stepId));
  }

  @Test
  public void addStepOnAdddEntity() throws Exception {
    String stepId = UUID.randomUUID().toString();
    addStep(stepId);
    addStep(stepId);
  }

  @Test
  public void activateStepOnNonAdddStep() throws Exception {
    String stepId = UUID.randomUUID().toString();
    String customerId = UUID.randomUUID().toString();
    Exception exception = assertThrows(ExecutionException.class, () -> client.activateStep(StepApi.ActivateStepRequest.newBuilder().setStepId(stepId).setCustomerId(customerId).build()).toCompletableFuture().get(2, SECONDS));
    assertTrue(exception.getCause().getMessage().contains(StepEntity.ERROR_NOT_EXIST));

  }

  @Test
  public void activateStep() throws Exception {
    String stepId = UUID.randomUUID().toString();
    String customerId = UUID.randomUUID().toString();
    addStep(stepId);
    activateStep(stepId,customerId);
  }

  @Test
  public void activateStepOnAlreadyActiveStepTheSameCustomer() throws Exception {
    String stepId = UUID.randomUUID().toString();
    String customerId = UUID.randomUUID().toString();
    addStep(stepId);
    activateStep(stepId,customerId);
    activateStep(stepId,customerId);

  }

  @Test
  public void activateStepOnAlreadyActiveStepDifferentCustomer() throws Exception {
    String stepId = UUID.randomUUID().toString();
    String customerId = UUID.randomUUID().toString();
    String otherCustomerId = customerId+"-other";
    addStep(stepId);
    activateStep(stepId,customerId);
    Exception exception = assertThrows(ExecutionException.class, () -> client.activateStep(StepApi.ActivateStepRequest.newBuilder().setStepId(stepId).setCustomerId(otherCustomerId).build()).toCompletableFuture().get(2, SECONDS));
    assertTrue(exception.getCause().getMessage().contains(StepEntity.ERROR_ALREADY_ACTIVATED_WITH_ANOTHER_CUSTOMER));

  }

  @Test
  public void powerOnStepOnNonAdddEntity() throws Exception {
    String stepId = UUID.randomUUID().toString();
    Exception exception = assertThrows(ExecutionException.class, () -> client.powerOnStep(StepApi.PowerOnStepRequest.newBuilder().setStepId(stepId).build()).toCompletableFuture().get(2, SECONDS));
    assertTrue(exception.getCause().getMessage().contains(StepEntity.ERROR_NOT_EXIST));

  }

  @Test
  public void powerOnStepOnNonActiveStep() throws Exception {
    String stepId = UUID.randomUUID().toString();
    addStep(stepId);
    Exception exception = assertThrows(ExecutionException.class, () -> client.powerOnStep(StepApi.PowerOnStepRequest.newBuilder().setStepId(stepId).build()).toCompletableFuture().get(2, SECONDS));
    assertTrue(exception.getCause().getMessage().contains(StepEntity.ERROR_NOT_ACTIVATED));

  }

  @Test
  public void powerOnStep() throws Exception {
    String stepId = UUID.randomUUID().toString();
    String customerId = UUID.randomUUID().toString();
    addStep(stepId);
    activateStep(stepId,customerId);
    powerOnStep(stepId);

  }

  @Test
  public void powerOnStepAlreadyOn() throws Exception {
    String stepId = UUID.randomUUID().toString();
    String customerId = UUID.randomUUID().toString();
    addStep(stepId);
    activateStep(stepId,customerId);
    powerOnStep(stepId);
    powerOnStep(stepId);

  }

  @Test
  public void powerOffStepOnNonAdddEntity() throws Exception {
    String stepId = UUID.randomUUID().toString();
    String customerId = UUID.randomUUID().toString();
    Exception exception = assertThrows(ExecutionException.class, () -> client.powerOffStep(StepApi.PowerOffStepRequest.newBuilder().setStepId(stepId).build()).toCompletableFuture().get(2, SECONDS));
    assertTrue(exception.getCause().getMessage().contains(StepEntity.ERROR_NOT_EXIST));

  }

  @Test
  public void powerOffStepOnNonActiveStep() throws Exception {
    String stepId = UUID.randomUUID().toString();
    String customerId = UUID.randomUUID().toString();
    addStep(stepId);
    Exception exception = assertThrows(ExecutionException.class, () -> client.powerOffStep(StepApi.PowerOffStepRequest.newBuilder().setStepId(stepId).build()).toCompletableFuture().get(2, SECONDS));
    assertTrue(exception.getCause().getMessage().contains(StepEntity.ERROR_NOT_ACTIVATED));

  }

  @Test
  public void powerOffStep() throws Exception {
    String stepId = UUID.randomUUID().toString();
    String customerId = UUID.randomUUID().toString();
    addStep(stepId);
    activateStep(stepId,customerId);
    powerOnStep(stepId);
    powerOffStep(stepId);

  }

  @Test
  public void powerOffStepAlreadyOff() throws Exception {
    String stepId = UUID.randomUUID().toString();
    String customerId = UUID.randomUUID().toString();
    addStep(stepId);
    activateStep(stepId,customerId);
    powerOffStep(stepId);
  }


  private void addStep(String stepId)throws Exception {
    client.addStep(StepApi.AddStepRequest.newBuilder().setStepId(stepId).build()).toCompletableFuture().get(2, SECONDS);
    StepApi.Step step = client.getStep(StepApi.GetStepRequest.newBuilder().setStepId(stepId).build()).toCompletableFuture().get(2,SECONDS);
    assertEquals(stepId,step.getStepId());
    assertFalse(step.getPowerOn());
    //assertTrue(isInNotActiveByStatusView(stepId));

  }

  private void activateStep(String stepId, String customerId)throws Exception{
    client.activateStep(StepApi.ActivateStepRequest.newBuilder().setStepId(stepId).setCustomerId(customerId).build()).toCompletableFuture().get(2, SECONDS);
    StepApi.Step step = client.getStep(StepApi.GetStepRequest.newBuilder().setStepId(stepId).build()).toCompletableFuture().get(2,SECONDS);
    assertEquals(stepId,step.getStepId());
    assertEquals(customerId,step.getCustomerId());
    assertFalse(step.getPowerOn());
    //assertFalse(isInNotActiveByStatusView(stepId));
    assertTrue(isInByCustomerView(stepId,customerId));
  }

  private void powerOnStep(String stepId) throws Exception{
    client.powerOnStep(StepApi.PowerOnStepRequest.newBuilder().setStepId(stepId).build()).toCompletableFuture().get(3,SECONDS);
    StepApi.Step step = client.getStep(StepApi.GetStepRequest.newBuilder().setStepId(stepId).build()).toCompletableFuture().get(2,SECONDS);
    assertEquals(stepId,step.getStepId());
    assertTrue(step.getPowerOn());
  }

  private void powerOffStep(String stepId)throws Exception{
    client.powerOffStep(StepApi.PowerOffStepRequest.newBuilder().setStepId(stepId).build()).toCompletableFuture().get(3,SECONDS);
    StepApi.Step step = client.getStep(StepApi.GetStepRequest.newBuilder().setStepId(stepId).build()).toCompletableFuture().get(2,SECONDS);
    assertEquals(stepId,step.getStepId());
    assertFalse(step.getPowerOn());
  }

  private boolean isInNotActiveByStatusView(String stepId) throws Exception{
    Thread.sleep(1000);
    Source<StepViewModel.StepByActiveStatusView,?> resultSource = viewByActiveStatusClient.getStepsByActiveStatus(StepViewModel.ByActiveStatusRequest.newBuilder().setActive("false").build());
    List<StepViewModel.StepByActiveStatusView> steps = resultSource.runWith(Sink.seq(),system).toCompletableFuture().get(3,SECONDS);
    steps.stream().forEach(d->log.info("not active step: {}",d.getStepId()));
    return steps.stream().filter(d->d.getStepId().equals(stepId)).count() == 1;
  }

  private boolean isInByCustomerView(String stepId, String customerId) throws Exception{
    Thread.sleep(1000);
    CompletionStage<StepViewModel.StepByCustomerViewList> resultSource = viewByCustomerClient.getStepsByCustomer(StepViewModel.ByCustomerRequest.newBuilder().setCustomerId(customerId).build());
    StepViewModel.StepByCustomerViewList list = resultSource.toCompletableFuture().get(3,SECONDS);
    return list.getStepsList().stream().filter(d->d.getStepId().equals(stepId)).count() == 1;
  }
}