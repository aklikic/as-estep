/* This code was generated by Akka Serverless tooling.
 * As long as this file exists it will not be re-generated.
 * You are free to make changes to this file.
 */
package lunaconf.domain;

import com.akkaserverless.javasdk.eventsourcedentity.EventSourcedEntity;
import com.akkaserverless.javasdk.eventsourcedentity.EventSourcedEntity.Effect;
import com.akkaserverless.javasdk.eventsourcedentity.EventSourcedEntityContext;
import com.google.protobuf.Empty;
import lunaconf.api.StepApi;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/** An event sourced entity. */
public class StepEntity extends AbstractStepEntity {

  @SuppressWarnings("unused")
  private final String entityId;
  private static Logger log = LoggerFactory.getLogger(StepEntity.class);

  public static final String ERROR_NOT_EXIST = "Step does not exist. It needs to be added first!";
  public static final String ERROR_NOT_ACTIVATED = "Step not activated!";
  public static final String ERROR_ALREADY_ACTIVATED_WITH_ANOTHER_CUSTOMER = "Step already activated with other customer!";

  public StepEntity(EventSourcedEntityContext context) {
    this.entityId = context.entityId();
  }

  @Override
  public StepDomain.StepState emptyState() {
    return StepDomain.StepState.getDefaultInstance();
  }

  @Override
  public Effect<StepApi.Step> addStep(StepDomain.StepState currentState, StepApi.AddStepRequest addStepRequest) {
    StepApi.Step step = StepApi.Step.newBuilder().setStepId(addStepRequest.getStepId()).build();
    StepDomain.StepAdded event = StepDomain.StepAdded.newBuilder().setStepId(addStepRequest.getStepId()).build();
    return effects().emitEvent(event).thenReply(__ -> step);
  }

  @Override
  public Effect<Empty> activateStep(StepDomain.StepState currentState, StepApi.ActivateStepRequest activateStepRequest) {
    if (currentState.equals(StepDomain.StepState.getDefaultInstance()))
      return effects().error(ERROR_NOT_EXIST);

    if (currentState.getCustomerId().isEmpty()) {
      StepDomain.StepActivated event = StepDomain.StepActivated.newBuilder().setStepId(activateStepRequest.getStepId()).setCustomerId(activateStepRequest.getCustomerId()).build();
      return effects().emitEvent(event).thenReply(__ -> Empty.getDefaultInstance());
    }
    if (currentState.getCustomerId().equals(activateStepRequest.getCustomerId()))
      return effects().reply(Empty.getDefaultInstance());
    else
      return effects().error(ERROR_ALREADY_ACTIVATED_WITH_ANOTHER_CUSTOMER);

  }

  @Override
  public Effect<Empty> powerOnStep(StepDomain.StepState currentState, StepApi.PowerOnStepRequest powerOnStepRequest) {

    if (currentState.equals(StepDomain.StepState.getDefaultInstance()))
      return effects().error(ERROR_NOT_EXIST);

    if(currentState.getCustomerId().isEmpty())
      return effects().error(ERROR_NOT_ACTIVATED);
    if (currentState.getPowerOn())
      return effects().reply(Empty.getDefaultInstance());//already on

    StepDomain.StepPoweredOn event = StepDomain.StepPoweredOn.newBuilder().setStepId(powerOnStepRequest.getStepId()).build();
    return effects().emitEvent(event).thenReply(__ -> Empty.getDefaultInstance());

  }

  @Override
  public Effect<Empty> powerOffStep(StepDomain.StepState currentState, StepApi.PowerOffStepRequest powerOffStepRequest) {
    if (currentState.equals(StepDomain.StepState.getDefaultInstance()))
      return effects().error(ERROR_NOT_EXIST);

    if(currentState.getCustomerId().isEmpty())
      return effects().error(ERROR_NOT_ACTIVATED);

    if (!currentState.getPowerOn())
      return effects().reply(Empty.getDefaultInstance());//already off

    StepDomain.StepPoweredOff event = StepDomain.StepPoweredOff.newBuilder().setStepId(powerOffStepRequest.getStepId()).build();
    return effects().emitEvent(event).thenReply(__ -> Empty.getDefaultInstance());

  }

  @Override
  public Effect<StepApi.Step> getStep(StepDomain.StepState currentState, StepApi.GetStepRequest getStepRequest) {
    if (currentState.equals(StepDomain.StepState.getDefaultInstance())) {
      return effects().error(ERROR_NOT_EXIST);
    } else {
      StepApi.Step step = StepApi.Step.newBuilder().setStepId(getStepRequest.getStepId()).setCustomerId(currentState.getCustomerId()).setPowerOn(currentState.getPowerOn()).build();
      return effects().reply(step);
    }
  }

  @Override
  public StepDomain.StepState stepAdded(StepDomain.StepState currentState, StepDomain.StepAdded stepAdded) {
    return StepDomain.StepState.newBuilder().setStepId(stepAdded.getStepId()).setPowerOn(false).build();
  }
  @Override
  public StepDomain.StepState stepActivated(StepDomain.StepState currentState, StepDomain.StepActivated stepActivated) {
    return currentState.toBuilder().setCustomerId(stepActivated.getCustomerId()).build();
  }
  @Override
  public StepDomain.StepState stepPoweredOn(StepDomain.StepState currentState, StepDomain.StepPoweredOn stepPoweredOn) {
    return currentState.toBuilder().setPowerOn(true).build();
  }
  @Override
  public StepDomain.StepState stepPoweredOff(StepDomain.StepState currentState, StepDomain.StepPoweredOff stepPoweredOff) {
    return currentState.toBuilder().setPowerOn(false).build();
  }

}