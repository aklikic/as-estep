/* This code was generated by Akka Serverless tooling.
 * As long as this file exists it will not be re-generated.
 * You are free to make changes to this file.
 */
package lunaconf.view;

import com.akkaserverless.javasdk.view.ViewContext;
import com.google.protobuf.Any;
import lunaconf.domain.StepDomain;

public class StepByCustomerView extends AbstractStepByCustomerView {

  public StepByCustomerView(ViewContext context) {}

  @Override
  public StepViewModel.StepByCustomerView emptyState() {
    return StepViewModel.StepByCustomerView.getDefaultInstance();
  }

  @Override
  public UpdateEffect<StepViewModel.StepByCustomerView> processStepActivated(
          StepViewModel.StepByCustomerView state, StepDomain.StepActivated deviceActivated) {
    if(!state.equals(StepViewModel.StepByCustomerView.getDefaultInstance()))
      return effects().ignore();
    StepViewModel.StepByCustomerView newState = StepViewModel.StepByCustomerView.newBuilder().setStepId(deviceActivated.getStepId()).setCustomerId(deviceActivated.getCustomerId()).setPowerOn(false).build();
    return effects().updateState(newState);
  }

  @Override
  public UpdateEffect<StepViewModel.StepByCustomerView> processStepPoweredOn(StepViewModel.StepByCustomerView state, StepDomain.StepPoweredOn devicePoweredOn) {
    StepViewModel.StepByCustomerView newState = state.toBuilder().setPowerOn(true).build();
    return effects().updateState(newState);
  }

  @Override
  public UpdateEffect<StepViewModel.StepByCustomerView> processStepPoweredOff(StepViewModel.StepByCustomerView state, StepDomain.StepPoweredOff devicePoweredOff) {
    StepViewModel.StepByCustomerView newState = state.toBuilder().setPowerOn(false).build();
    return effects().updateState(newState);
  }

  @Override
  public UpdateEffect<StepViewModel.StepByCustomerView> ignoreOtherEvents(
          StepViewModel.StepByCustomerView state, Any any) {
    return effects().ignore();
  }
}