/* This code was generated by Akka Serverless tooling.
 * As long as this file exists it will not be re-generated.
 * You are free to make changes to this file.
 */
package lunaconf.view;

import com.akkaserverless.javasdk.view.ViewContext;
import com.google.protobuf.Any;
import lunaconf.domain.StepDomain;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StepByActiveStatusView extends AbstractStepByActiveStatusView {

  private static Logger log = LoggerFactory.getLogger(StepByActiveStatusView.class);
  public StepByActiveStatusView(ViewContext context) {}

  @Override
  public StepViewModel.StepByActiveStatusView emptyState() {
    return StepViewModel.StepByActiveStatusView.getDefaultInstance();
  }

  @Override
  public UpdateEffect<StepViewModel.StepByActiveStatusView> processStepAdded(
          StepViewModel.StepByActiveStatusView state, StepDomain.StepAdded deviceAdded) {
    log.debug("processStepAdded view: {}/{}",state,deviceAdded);
    StepViewModel.StepByActiveStatusView newState = StepViewModel.StepByActiveStatusView.newBuilder().setStepId(deviceAdded.getStepId()).setActive("false").build();
    return effects().updateState(newState);
  }
  @Override
  public UpdateEffect<StepViewModel.StepByActiveStatusView> processStepActivated(
          StepViewModel.StepByActiveStatusView state, StepDomain.StepActivated deviceActivated) {
    log.debug("processStepActivated view: {}",state);
    StepViewModel.StepByActiveStatusView newState = state.toBuilder().setActive("true").setCustomerId(deviceActivated.getCustomerId()).build();
    return effects().updateState(newState);
  }
  @Override
  public UpdateEffect<StepViewModel.StepByActiveStatusView> ignoreOtherEvents(
          StepViewModel.StepByActiveStatusView state, Any any) {
    log.debug("ignoreOtherEvents view: {}/{}",state,any.getTypeUrl());
    return effects().ignore();
  }
}