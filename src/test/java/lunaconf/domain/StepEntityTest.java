/* This code was generated by Akka Serverless tooling.
 * As long as this file exists it will not be re-generated.
 * You are free to make changes to this file.
 */
package lunaconf.domain;

import com.akkaserverless.javasdk.eventsourcedentity.EventSourcedEntity;
import com.akkaserverless.javasdk.eventsourcedentity.EventSourcedEntityContext;
import com.akkaserverless.javasdk.testkit.EventSourcedResult;
import com.google.protobuf.Empty;
import java.util.ArrayList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.UUID;

import lunaconf.api.StepApi;
import org.junit.Test;
import scala.jdk.javaapi.CollectionConverters;

import static org.junit.Assert.*;

public class StepEntityTest {

  @Test
  public void addStep(){
    StepEntityTestKit testKit = StepEntityTestKit.of(StepEntity::new);

    String deviceId = UUID.randomUUID().toString();

    addStep(testKit,deviceId);
  }

  @Test
  public void addStepOnAddedEntity() throws Exception {
    StepEntityTestKit testKit = StepEntityTestKit.of(StepEntity::new);

    String deviceId = UUID.randomUUID().toString();

    addStep(testKit,deviceId);
    addStep(testKit,deviceId);

  }

  @Test
  public void activateStepOnNonAddedStep() throws Exception {
    StepEntityTestKit testKit = StepEntityTestKit.of(StepEntity::new);

    String deviceId = UUID.randomUUID().toString();
    String customerId = UUID.randomUUID().toString();

    EventSourcedResult<Empty> result = testKit.activateStep(StepApi.ActivateStepRequest.newBuilder().setStepId(deviceId).setCustomerId(customerId).build());
    assertEquals(StepEntity.ERROR_NOT_EXIST,result.getError());

  }

  @Test
  public void activateStep() throws Exception {
    StepEntityTestKit testKit = StepEntityTestKit.of(StepEntity::new);

    String deviceId = UUID.randomUUID().toString();
    String customerId = UUID.randomUUID().toString();

    addStep(testKit,deviceId);
    activateStep(testKit,deviceId,customerId);
  }

  @Test
  public void activateStepOnAlreadyActiveStepTheSameCustomer() throws Exception {
    StepEntityTestKit testKit = StepEntityTestKit.of(StepEntity::new);

    String deviceId = UUID.randomUUID().toString();
    String customerId = UUID.randomUUID().toString();

    addStep(testKit,deviceId);
    activateStep(testKit,deviceId,customerId);
    EventSourcedResult<Empty> result = testKit.activateStep(StepApi.ActivateStepRequest.newBuilder().setStepId(deviceId).setCustomerId(customerId).build());
    assertFalse(result.didEmitEvents());

  }

  @Test
  public void activateStepOnAlreadyActiveStepDifferentCustomer() throws Exception {
    StepEntityTestKit testKit = StepEntityTestKit.of(StepEntity::new);

    String deviceId = UUID.randomUUID().toString();
    String customerId = UUID.randomUUID().toString();
    String otherCustomerId = customerId+"-other";

    addStep(testKit,deviceId);
    activateStep(testKit,deviceId,customerId);
    EventSourcedResult<Empty> result = testKit.activateStep(StepApi.ActivateStepRequest.newBuilder().setStepId(deviceId).setCustomerId(otherCustomerId).build());
    assertEquals(StepEntity.ERROR_ALREADY_ACTIVATED_WITH_ANOTHER_CUSTOMER,result.getError());


  }

  @Test
  public void powerOnStepOnNonAddedEntity() throws Exception {
    StepEntityTestKit testKit = StepEntityTestKit.of(StepEntity::new);

    String deviceId = UUID.randomUUID().toString();

    EventSourcedResult<Empty> result = testKit.powerOnStep(StepApi.PowerOnStepRequest.newBuilder().setStepId(deviceId).build());
    assertEquals(StepEntity.ERROR_NOT_EXIST,result.getError());

  }

  @Test
  public void powerOnStepOnNonActiveStep() throws Exception {
    StepEntityTestKit testKit = StepEntityTestKit.of(StepEntity::new);

    String deviceId = UUID.randomUUID().toString();

    addStep(testKit,deviceId);

    EventSourcedResult<Empty> result = testKit.powerOnStep(StepApi.PowerOnStepRequest.newBuilder().setStepId(deviceId).build());
    assertEquals(StepEntity.ERROR_NOT_ACTIVATED,result.getError());


  }

  @Test
  public void powerOnStep() throws Exception {
    StepEntityTestKit testKit = StepEntityTestKit.of(StepEntity::new);

    String deviceId = UUID.randomUUID().toString();
    String customerId = UUID.randomUUID().toString();

    addStep(testKit,deviceId);
    activateStep(testKit,deviceId,customerId);
    powerOnStep(testKit,deviceId,customerId);

  }

  @Test
  public void powerOnStepAlreadyOn() throws Exception {
    StepEntityTestKit testKit = StepEntityTestKit.of(StepEntity::new);

    String deviceId = UUID.randomUUID().toString();
    String customerId = UUID.randomUUID().toString();
    addStep(testKit,deviceId);
    activateStep(testKit,deviceId,customerId);
    powerOnStep(testKit,deviceId,customerId);

    EventSourcedResult<Empty> result = testKit.powerOnStep(StepApi.PowerOnStepRequest.newBuilder().setStepId(deviceId).build());
    assertFalse(result.didEmitEvents());

  }

  @Test
  public void powerOffStepOnNonAddedEntity() throws Exception {
    StepEntityTestKit testKit = StepEntityTestKit.of(StepEntity::new);

    String deviceId = UUID.randomUUID().toString();

    EventSourcedResult<Empty> result = testKit.powerOffStep(StepApi.PowerOffStepRequest.newBuilder().setStepId(deviceId).build());
    assertEquals(StepEntity.ERROR_NOT_EXIST,result.getError());

  }

  @Test
  public void powerOffStepOnNonActiveStep() throws Exception {
    StepEntityTestKit testKit = StepEntityTestKit.of(StepEntity::new);

    String deviceId = UUID.randomUUID().toString();

    addStep(testKit,deviceId);

    EventSourcedResult<Empty> result = testKit.powerOffStep(StepApi.PowerOffStepRequest.newBuilder().setStepId(deviceId).build());
    assertEquals(StepEntity.ERROR_NOT_ACTIVATED,result.getError());

  }

  @Test
  public void powerOffStep() throws Exception {
    StepEntityTestKit testKit = StepEntityTestKit.of(StepEntity::new);

    String deviceId = UUID.randomUUID().toString();
    String customerId = UUID.randomUUID().toString();

    addStep(testKit,deviceId);
    activateStep(testKit,deviceId,customerId);
    powerOnStep(testKit,deviceId,customerId);
    powerOffStep(testKit,deviceId,customerId);

  }

  @Test
  public void powerOffStepAlreadyOff() throws Exception {
    StepEntityTestKit testKit = StepEntityTestKit.of(StepEntity::new);

    String deviceId = UUID.randomUUID().toString();
    String customerId = UUID.randomUUID().toString();

    addStep(testKit,deviceId);
    activateStep(testKit,deviceId,customerId);
    powerOnStep(testKit,deviceId,customerId);
    powerOffStep(testKit,deviceId,customerId);

    EventSourcedResult<Empty> result = testKit.powerOffStep(StepApi.PowerOffStepRequest.newBuilder().setStepId(deviceId).build());
    assertFalse(result.didEmitEvents());
  }


  private void addStep(StepEntityTestKit testKit,String deviceId){
    EventSourcedResult<StepApi.Step> result = testKit.addStep(StepApi.AddStepRequest.newBuilder().setStepId(deviceId).build());

    StepDomain.StepAdded expectedEvent =  StepDomain.StepAdded.newBuilder().setStepId(deviceId).build();
    StepDomain.StepAdded event = result.getNextEventOfType(StepDomain.StepAdded.class);
    assertEquals(expectedEvent,event);

    StepDomain.StepState expectedState = StepDomain.StepState.newBuilder().setStepId(deviceId).build();
    assertEquals(expectedState,testKit.getState());

    StepApi.Step expectedReply = StepApi.Step.newBuilder().setStepId(deviceId).build();
    assertEquals(expectedReply,result.getReply());
  }

  private void activateStep(StepEntityTestKit testKit,String deviceId, String customerId){
    EventSourcedResult<Empty> result = testKit.activateStep(StepApi.ActivateStepRequest.newBuilder().setStepId(deviceId).setCustomerId(customerId).build());

    StepDomain.StepActivated expectedEvent =  StepDomain.StepActivated.newBuilder().setStepId(deviceId).setCustomerId(customerId).build();
    StepDomain.StepActivated event = result.getNextEventOfType(StepDomain.StepActivated.class);
    assertEquals(expectedEvent,event);

    StepDomain.StepState expectedState = StepDomain.StepState.newBuilder().setStepId(deviceId).setCustomerId(customerId).build();
    assertEquals(expectedState,testKit.getState());
  }

  private void powerOnStep(StepEntityTestKit testKit,String deviceId, String customerId){
    EventSourcedResult<Empty> result = testKit.powerOnStep(StepApi.PowerOnStepRequest.newBuilder().setStepId(deviceId).build());

    StepDomain.StepPoweredOn expectedEvent =  StepDomain.StepPoweredOn.newBuilder().setStepId(deviceId).build();
    StepDomain.StepPoweredOn event = result.getNextEventOfType(StepDomain.StepPoweredOn.class);
    assertEquals(expectedEvent,event);

    StepDomain.StepState expectedState = StepDomain.StepState.newBuilder().setStepId(deviceId).setCustomerId(customerId).setPowerOn(true).build();
    assertEquals(expectedState,testKit.getState());
  }

  private void powerOffStep(StepEntityTestKit testKit,String deviceId, String customerId){
    EventSourcedResult<Empty> result = testKit.powerOffStep(StepApi.PowerOffStepRequest.newBuilder().setStepId(deviceId).build());

    StepDomain.StepPoweredOff expectedEvent =  StepDomain.StepPoweredOff.newBuilder().setStepId(deviceId).build();
    StepDomain.StepPoweredOff event = result.getNextEventOfType(StepDomain.StepPoweredOff.class);
    assertEquals(expectedEvent,event);

    StepDomain.StepState expectedState = StepDomain.StepState.newBuilder().setStepId(deviceId).setCustomerId(customerId).setPowerOn(false).build();
    assertEquals(expectedState,testKit.getState());
  }

}
